<11-2. String 클래스>

인스턴스가 생성이 되면, 인스턴스를 참조할 수 있는 참조 값(주소 값)이 반환된다.
(일반적으로) 이 값을 참조변수에 저장한 다음, 참조변수를 통해서 메소드를 호출한다.

- String 클래스의 인스턴스는 상수 형태의 인스턴스입니다.
String 인스턴스는 배열을 기반으로 큰 따옴표로 명시된 문자열 데이터를 저장하게 되는데, 이렇게 저장된 문자열 데이터는 결코 바꿀 수 없다.
바꾸는 메소드가 제공되지 않을 뿐만 아니라, 문자열 데이터에 직접적인 접근도 불가능하기 때문에 바꿀 수 있는 방법이 전혀 없다.
즉, 데이터의 변경이 불가능하도록 String 클래스는 정의되어 있다. 

인스턴스의 생성은 시스템에 부담이 되는 요소
→ 문자열이 동일한 경우에는 하나의 String 인스턴스만 생성해서 공유하도록 한다
즉, 동일한 문자열을 데이터로 하여 인스턴스를 생성하면, 그 수가 몇 개가 되건 하나의 인스턴스만 생성이 되어 함께 참조하게 된다.

String str4 = 1 + "Lemon" + 2;
→ String str4 = new StringBuilder().append(1).append("Lemon").append(2).toString();
아무리 많은 문자열 + 연산을 하더라도 추가적인 인스턴스 생성은 두 개로 제한된다.
위 문장의 이해를 위해 StringBuilder 클래스에 대해 공부해보자.

<11-4. StringBuilder & StringBuffer 클래스>

- String : 변경이 불가능한 문자열의 표현을 위한 클래스
- StringBuilder, StringBuffer : 변경이 가능한 문자열의 표현을 위한 클래스
단 String 인스턴스와 달리 StringBuilder와 StringBuffer의 인스턴스는 문자열이라고 하지 않는다.

"StringBuffer는 쓰레드에 안전하지만, StringBuilder는 쓰레드에 안전하지 못하다."


