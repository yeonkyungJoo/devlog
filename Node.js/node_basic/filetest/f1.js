// 비동기 작업을 수행하는 함수를 사용해서 콜백 처리 구현
// 비동기식 or 동기식 api 확인
// 1. 간단하게 파일을 생성 (1.txt, 2.txt, 3.txt)
// 2. 각 파일에 간단한 내용을 작성
// 3. 파일 오픈
// 4. 파일 읽기(동기식, 비동기식 각각)
// 5. 파일을 닫는다
// --------------------------------------------------------

const fs = require('fs')

// 비동기 함수는 리턴 값이 없다 <-> 동기 함수는 리턴값이 존재한다
// 결과를 돌려주는 콜백함수 1번 인자는 에러, 2번 인자는 값을 세팅하는 것이 보편적

console.log('읽기 시작')
fs.readFile('./1.txt', (err, data)=>{
// -------------- fs.readFile()이 내부적으로 하는 일 ----------------
// 1.txt를 열고 -> 읽고 -> 데이터를 획득하면 혹은 에러가 나면
// 2번 인자의 콜백함수를 호출하고, 호출할 때 파라미터 세팅
// 1번 인자에 에러를, 2번 인자에 데이터를 넣는다
// -----------------------------------------------------------------
console.log(err, data)
console.log(err, toStr(data))
// 읽기 시작 -> 데이터 -> 읽기 끝 순서로 작업을 진행하고 싶다면
// 비동기 작업 이후는 콜백에서부터 이어가면 된다 (-> 콜백헬이 발생하는 이유)
console.log('읽기 끝')
})
// console.log('읽기 끝') // 이 위치에 있을 때 data보다 먼저 찍힌다


// fs로 읽은 텍스트 버퍼 데이터를 실제 텍스트로 변환
function toStr(data) {
    return new String(data).toString()
}